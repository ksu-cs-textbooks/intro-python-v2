<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Conditionals :: Introduction to Python</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/</link><description/><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/01-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/01-intro/</guid><description>Resources Slides In this lab, we’re going to introduce another data type in Python, the Boolean data type. Working with Boolean values in programming is a very important skill to learn.
Elsewhere in this course, we’ve already learned about Boolean values and how they work, so we won’t cover that information again here. Feel free to refer to other areas in this course for more background on Booleans, Boolean Logic, Boolean Algebra, and other related topics.</description></item><item><title>Booleans</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/02-booleans/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/02-booleans/</guid><description>Resources Slides In Python, Boolean values are stored in the bool data type. Variables of the bool data type can only store one of two values, True or False. So, a Boolean value is really the simplest data value we can imagine - it is a single binary bit representing a value of True or False.
To create a Boolean variable in Python, we can simply assign those values to a variable in an assignment statement:</description></item><item><title>Boolean Operators</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/03-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/03-operators/</guid><description>Resources Slides Python also includes several operators that can be applied to one or two Boolean values. These operators make up the basis of Boolean logic, and allow us to construct complex expressions of Boolean values. Let’s quickly review the three basic Boolean operators present in Python.
And Operator In Python, we use the keyword and to perform the Boolean and operation. This operator will return True if both input values are also True, otherwise it will return False.</description></item><item><title>Boolean Comparators</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/04-comparators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/04-comparators/</guid><description>Resources Slides Python also uses various comparators to allow us to compare values of many different data types to produce a Boolean value. We can compare numbers, strings, and many other data types in Python using these comparators.
The basic comparators in Python are:
== equal != not equal &lt; less than &lt;= less than or equal to > greater than >= greater than or equal to Notice that the equal comparator in Python now uses two equals signs == instead of a single one.</description></item><item><title>Boolean Practice</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/05-boolean-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/05-boolean-practice/</guid><description>Let’s try some simple practice problems. These problems are not graded - they are just for you to practice before doing the real exercises in the lab itself. You can find the answers below each question by clicking the button below each question.
4.1 Reading Code What is printed to the terminal when the following Python program is run?
a = 5 b = 10 c = 15 x = b > a and c &lt; b or (not (a + b > c)) y = b + a >= c or c / a > b / a z = c - b !</description></item><item><title>If</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/06-if/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/06-if/</guid><description>Resources Slides Now that we understand how to use Boolean values in our programs, it’s time to put those values to use. One way to think of the result of a Boolean expression is that it helps us make a decision in our programs. For example, if we want to do something special in our program when the user inputs the value $ 42 $ into the variable x, then we can write the Boolean expression x == 42 to help us decide if the user input the correct value.</description></item><item><title>If-Else</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/07-if-else/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/07-if-else/</guid><description>Resources Slides Python also supports another kind of conditional statement, the if-else statement. An if-else statement contains a single Boolean expression, but two blocks of code. If the Boolean expression evaluates to True, then one block of statements is executed. If it is False, then the other block will be executed.
The general structure of an if-else statement in Python is shown below:
if &lt;boolean expression>: &lt;block of statements 1> else: &lt;block of statements 2> Notice that the else keyword is followed by a colon, just like the first line of the if-else statement.</description></item><item><title>Testing Branches &amp; Paths</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/08-branch-path-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/08-branch-path-testing/</guid><description>Resources Slides One important concept to understand when writing if statements and if-else statements is the control flow of the program. Before we learned about conditional statements, our programs had a linear control flow - there was exactly one pathway through the program, no matter what. Each time we ran the program, the same code would be executed each time in the same order. However, with the introduction of conditional statements, this is no longer the case.</description></item><item><title>Conditionals Practice</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/09-conditionals-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/09-conditionals-practice/</guid><description>Let’s try some simple practice problems. These problems are not graded - they are just for you to practice before doing the real exercises in the lab itself. You can find the answers below each question by clicking the button below each question.
4.5 Reading Code Consider the following Python program:
a = int(input("Enter a whole number: ")) b = int(input("Enter a whole number: ")) if (a + b) % 3 == 0: print("Branch 1") else: print("Branch 2") a = a * 2 b = b * 3 if (a + b) % 3 == 0: print("Branch 3") else: print("Branch 4")What output is printed when the user inputs the values $ 2 $ and $ 4 $?</description></item><item><title>Linear Conditionals</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/10-linear/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/10-linear/</guid><description>Resources Slides Conditional statements are a very powerful tool for programmers to use. So far in this lab, we’ve explored simple conditional statements, including the if statement and if-else statement in Python. However, up to this point we’ve only looked at how we can use a single conditional statement at a time in a program, which can be very limiting. Now we’re going to explore how we can combine conditional statements in a variety of different ways to build even more complex programs.</description></item><item><title>Chaining Conditionals</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/11-chaining/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/11-chaining/</guid><description>Resources Slides In the previous example, we saw a set of linear if statements to represent a Rock Paper Scissors game. As we discussed on that page, the Boolean expressions are meant to be mutually exclusive, meaning that only one of the Boolean expressions will be true no matter what input the user provides.
When we have mutually exclusive Boolean expressions like this, we can instead use if-else statements to make the mutually exclusive structure of the program clearer to the user.</description></item><item><title>Nesting Conditionals</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/12-nesting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/12-nesting/</guid><description>Resources Slides We’ve already seen how we can chain conditional statements by placing a new conditional statement inside of the False branch of another conditional statement. If we think about that, however, that implies that we probably should be able to place conditional statements inside of the True branch as well, or really anywhere. As it turns out, that’s exactly correct. We call this nesting, and it is really quite similar to what we’ve already seen in this lab.</description></item><item><title>Blocks &amp; Scope</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/13-blocks-scope/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/13-blocks-scope/</guid><description>Resources Slides Now that we’ve seen how we can chain and nest multiple conditional statements in our code, we need to address a very important concept: variable scope.
In programming, variable scope refers to the locations in code where variables can be accessed. Contrary to what we may think based on our experience, when we declare a variable in our code, it may not always be available everywhere. Instead, we need to learn the rules that determine where variables are available and why.</description></item><item><title>Worked Example</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/14-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/14-example/</guid><description>Resources Slides Let’s go through another worked example to see how we can translate a problem statement into a working program. We’ll also take a look at how we can test the program to verify that it is working as intended.
Problem Statement Here’s a short and simple game that can be played by three players:
Three players each guess a positive integer greater than $ 0 $, and then share them simultaneously.</description></item><item><title>Nesting Practice</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/15-nesting-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/15-nesting-practice/</guid><description>Let’s try some simple practice problems. These problems are not graded - they are just for you to practice before doing the real exercises in the lab itself. You can find the answers below each question by clicking the button below each question.
4.11 Reading Code Consider the following Python program:
p1 = int(input("Enter a positive integer for player 1: ")) p2 = int(input("Enter a positive integer for player 2: ")) p3 = int(input("Enter a positive integer for player 3: ")) if p1 &lt;= 0 or p2 &lt;= 0 or p3 &lt;= 0: print("Error") else: twos = (p1 + p2 + p3) // 2 threes = (p1 + p2 + p3) // 3 fours = (p1 + p2 + p3) // 4 if p1 == p2 or p2 == p3 or p3 == p1: print("Tie") elif p1 !</description></item><item><title>Summary</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/16-summary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/04-conditionals/16-summary/</guid><description>In this lab, we introduced several major important topics in Python. Let’s quickly review them.
Booleans in Python True False bool() procedure to convert values If the input is the value False, the value 0, the value None, or anything with 0 length, including the empty string, it will return False. Otherwise, for all other values it will return True. Boolean Operators and or not Boolean Comparators == equal != not equal &lt; less than &lt;= less than or equal to > greater than >= greater than or equal to Comparators and Strings Strings are compared using lexicographic order</description></item></channel></rss>