<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Loops :: Introduction to Python</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/</link><description/><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/01-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/01-intro/</guid><description>Resources Slides Over the last few labs, we’ve explored how we can change the control flow of our programs using conditional statements. A program that doesn’t contain any conditional statements will have a linear control flow. Each time we run the program, it will execute the same steps in the same order, but it may use different data based on input from the user.
When a program contains a conditional statement, its control flow can split into different branches.</description></item><item><title>While Loops</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/02-while-loops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/02-while-loops/</guid><description>Resources Slides The first type of loop to explore in Python is the while loop. A while loop uses a Boolean expression, and will repeat the code inside of the loop as long as the Boolean expression evaluates to True. These loops are typically used when we want to repeat some steps, but we aren’t sure exactly how many times it must be done. Instead, we typically know that there is some condition that must be True while we repeat the code, and once it turns False we can stop looping and continue with the program.</description></item><item><title>For Loops</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/03-for-loops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/03-for-loops/</guid><description>Resources Slides Python also includes a second type of loop that is very useful, the for loop. A for loop is used when we want to repeat the steps a certain number of times. However, in Python, we can’t just say that we want to repeat something $ 10 $ times. Instead, we use the built-in range() function in Python to generate a list of numbers that we use in our loop.</description></item><item><title>Input with Loops</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/04-input-loops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/04-input-loops/</guid><description>Resources Slides Loops in Python are also a great way to handle situations where a user must input a value that meets certain criteria. Previously, we used an if statement to determine if the input was valid, but if it wasn’t valid all we could do was print an error and end the program. If we use a loop instead, we can prompt the user to provide additional input until we receive a valid value.</description></item><item><title>Testing Loops</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/05-testing-loops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/05-testing-loops/</guid><description>Resources Slides Another important aspect of working with loops in code is learning how to properly test programs that contain loops. So, let’s look at some of the methods we can use when testing our programs containing loops to make sure they work correctly and won’t run into any problems.
Branch and Path Coverage Loops, like conditional statements, introduce different branches and paths into our programs. So, one of the first steps when testing these programs is to develop a set of inputs that will execute each branch of the code, as well as finding inputs that will execute multiple different paths through the program.</description></item><item><title>Worked Example</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/06-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/06-example/</guid><description>Resources Slides Now that we’ve learned all about using loops in Python, let’s go through a complete worked example to see how all the pieces fit together. As we continue to develop larger and more complex programs, it is helpful to observe the entire process from start to finish so we can see how to easily develop a program one step at a time. Once we’ve created our program, we’ll also perform a bit of testing to make sure that it works correctly.</description></item><item><title>Loops Practice</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/07-loops-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/07-loops-practice/</guid><description>Let’s try some simple practice problems. These problems are not graded - they are just for you to practice before doing the real exercises in the lab itself. You can find the answers below each question by clicking the button below each question.
5.1 Reading Code Consider the following pseudocode program:
x = int(input("Enter a positive integer: ")) while(x &lt;= 0): print("Invalid Input!") x = int(input("Enter a positive integer: ")) a = 1 for i in range(9): if x % a == 0: print(f"{a}") a = a + 1Explain, in your own words, the output that this program produces in relation to the input provided.</description></item><item><title>Nested While Loops</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/08-nested-while/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/08-nested-while/</guid><description>Resources Slides Up to this point, we explored how we can use iterative structures in our code, such as while loops and for loops, to repeat steps a certain number of times or while a Boolean condition is true. This is a very powerful tool, since it allows us to build programs that can repeatedly ask the user to provide input until a valid value is received, or even perform a repeated calculation until it reaches a desired result.</description></item><item><title>Nested For Loops</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/09-nested-for/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/09-nested-for/</guid><description>Resources Slides For loops can also be nested, just like while loops. In fact, nesting for loops is often much simpler than nesting while loops, since it is very easy to predict exactly how many times a for loop will iterate, and also because it is generally easier to determine if a for loop will properly terminate instead of a while loop.
A great way to explore using nested for loops is by printing ASCII Art shapes.</description></item><item><title>Testing Nested Loops</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/10-testing-nested/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/10-testing-nested/</guid><description>Resources Slides Testing nested loops can also be very tricky, especially because they can make our program’s control flow even more complex. So, let’s briefly go through an example to see how to determine what inputs we can use to test nested loops.
Consider the following example program:
x = int(input("Enter a positive integer: ")) while x &lt;= 0: print("Invalid input!") x = int(input("Enter a positive integer: ")) y = int(input("Enter a positive integer: ")) while y &lt;= 0: print("Invalid input!</description></item><item><title>Worked Example</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/11-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/11-example/</guid><description>Resources Slides Now that we’ve explored how to create programs that contain nested loops, let’s work through a complete example problem to see how we can convert a problem statement into working code.
Consider the following problem statement:
Write a program to print the sum of the first n prime numbers, where n is provided as input from the user.
This is a very simple problem statement, but it can be very complex to build a program that satisfies it.</description></item><item><title>Nesting Practice</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/12-nesting-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/12-nesting-practice/</guid><description>Let’s try some simple practice problems. These problems are not graded - they are just for you to practice before doing the real exercises in the lab itself. You can find the answers below each question by clicking the button below each question.
5.7 Reading Code Consider the following Python program:
x = int(input("Enter a positive integer: ")) while x &lt;= 0: print("Invalid input!") x = int(input("Enter a positive integer: ")) n = x for i in range(n - 1): for j in range(n - i - 1): print(" ", end="") for j in range(i + 1): print("* ", end="") print("") for i in range(n): for j in range(n): print("* ", end="") print("")Describe the shape that will be printed when this program is executed.</description></item><item><title>Summary</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/13-summary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/05-loops/13-summary/</guid><description>In this lab, we introduced several major important topics in Python. Let’s quickly review them.
Python While Loops While loops in Python will execute while a Boolean expression evaluates to true.
while &lt;boolean expression>: &lt;block of statements>Range Function The range() function in Python is used to generate a list of numbers. It can be used in three ways:
range(stop) - numbers from $0$ up to (but not including) stop range(start, stop) - numbers from start up to (but not including) stop range(start, stop, step) - numbers from start up to (but not including) stop, with step between each number.</description></item></channel></rss>