<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dictionaries :: Introduction to Python</title><link>https://textbooks.cs.ksu.edu/intro-python/08-dictionaries/</link><description/><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/intro-python/08-dictionaries/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://textbooks.cs.ksu.edu/intro-python/08-dictionaries/01-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python/08-dictionaries/01-intro/</guid><description>YouTube Video Resources Slides Previously, we learned how we can use lists in Python to store multiple values, or elements, in a single variable. Each element in a list is given an index, which allows us to uniquely reference and identify each element’s position in a list. Python lists use consecutive integers starting at $ 0 $ as indexes, which makes for a pretty easy to use data structure.</description></item><item><title>Dictionaries</title><link>https://textbooks.cs.ksu.edu/intro-python/08-dictionaries/02-dictionaries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python/08-dictionaries/02-dictionaries/</guid><description>YouTube Video Resources Slides In theory, a dictionary is very similar to a list in Python - it is a data structure that can store many different items within a single variable. However, instead of just storing single values as elements and assigning them sequential indexes, dictionaries store a number of key-value pairs. A key is any value that can be used as a unique identifier for the associated value to be stored in the dictionary.</description></item><item><title>Loops with Dictionaries</title><link>https://textbooks.cs.ksu.edu/intro-python/08-dictionaries/03-loops-dictionaries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python/08-dictionaries/03-loops-dictionaries/</guid><description>YouTube Video Resources Slides Another useful way we can work with dictionaries in Python is by iterating through them. In Python 3.6 and beyond, the items in a dictionary will be presented in the same order that they were added to the dictionary. This isn’t always the case in other languages or older versions of Python
Loops with Dictionaries - Keys There are two ways we can iterate through a dictionary in Python.</description></item><item><title>Dictionaries &amp; Functions</title><link>https://textbooks.cs.ksu.edu/intro-python/08-dictionaries/04-dictionaries-functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python/08-dictionaries/04-dictionaries-functions/</guid><description>YouTube Video Resources Slides Finally, let’s briefly look at how dictionaries operate when used as parameters to functions in Python. As we can probably guess from the earlier example in Python Tutor, dictionaries also use call by reference, just like lists.
Here’s a short example program in Python that demonstrates the use of dictionaries with functions.
def add_score(scores): name = input("Enter a name: ") score = int(input("Enter a score: ")) scores[name] = score def average_score(scores): total = 0 for key, value in scores.</description></item><item><title>Worked Example</title><link>https://textbooks.cs.ksu.edu/intro-python/08-dictionaries/05-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python/08-dictionaries/05-example/</guid><description>YouTube Video Resources Slides Finally, let’s go through a complete worked example program that uses dictionaries in Python. Consider the following problem statement:
Write a program that will compute the score of a given word in a game of Scrabble. Assume that there are no special squares present. The program should prompt the user to input a string that only contains letters, and then compute the total score of that string by summing the value assigned to each letter.</description></item><item><title>Dictionaries Practice</title><link>https://textbooks.cs.ksu.edu/intro-python/08-dictionaries/06-dictionaries-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python/08-dictionaries/06-dictionaries-practice/</guid><description>Let’s try some simple practice problems. These problems are not graded - they are just for you to practice before doing the real exercises in the lab itself. You can find the answers below each question by clicking the button below each question.
8.1 Reading Code Consider the following Python program:
# Same function as the worked example - only accepts letters def get_input(): word = input("Enter a single word: ") while not word.</description></item><item><title>Summary</title><link>https://textbooks.cs.ksu.edu/intro-python/08-dictionaries/07-summary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python/08-dictionaries/07-summary/</guid><description>In this lab, we introduced several major important topics in Python. Let’s quickly review them.
Python Dictionaries Dictionaries in Python allow us to store key-value pairs in a single data structure. Keys are used to uniquely identify an associated value.
Dictionaries can be created using curly brackets {}:
dict_1 = {} dict_2 = {"a": 1, "b": 2, "c": 3}Adding and Accessing Dictionary Items New elements can be added to a dictionary by providing a new key in square brackets:</description></item></channel></rss>