<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Strings &amp; Input :: Introduction to Python</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/strings-input/</link><description/><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/intro-python-v2/strings-input/index.xml" rel="self" type="application/rss+xml"/><item><title>Input</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/strings-input/input/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/strings-input/input/</guid><description>Resources Slides The Python programs we’ve written up to this point are very static - each time we run the program, it will perform the same exact operations. Since we’re running these programs on a real computer, it might be helpful to build programs that can read and respond to input from the user, making them much more useful overall. Python includes many different ways to handle user input, but in this lab we’ll just focus on the simple input() function.</description></item><item><title>Numerical Input</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/strings-input/input-numbers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/strings-input/input-numbers/</guid><description>Resources Slides Of course, we can also read numerical input in Python using the input() function. To do this, we must simply use either the int() or float() function to convert the input received as a string to the correct data type.
Here’s a quick example program that requires two inputs for the price and quantity of an item being purchased:
text_one = input("Enter the price of one item: ") price = float(text_one) text_two = input("Enter the quantity of items: ") quantity = int(text_two) cost = price * quantity print("The total cost is $", end="") print(cost) If the user wishes to purchase $ 3 $ items at the price of $ 2.</description></item><item><title>String Operators</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/strings-input/string-ops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/strings-input/string-ops/</guid><description>Resources Slides Concatenate Python includes an operator that can be used to concatenate, or combine, two strings together, one after another. We can use the plus symbol + between two strings to concatenate them together into a single string, making it much simpler to build more complex strings and outputs.
A simple example is shown below:
first = "Hello" second = "World" print(first + second) When executed, this code will display this output:</description></item><item><title>F-Strings</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/strings-input/f-strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/strings-input/f-strings/</guid><description>Resources Slides Python also includes another method of building strings, which are known as “F-strings”. F-strings allow us to put placeholders in strings that are later replaced with values from variables, effectively creating a way to build “templates” that can be used throughout our program.
The easiest way to see how this works is looking at a few examples. Let’s start with a simple one:
name = input("Enter your name: ") print(f"Hello {name}") If the user inputs "Willie Wildcat" when prompted, then this code will produce this output:</description></item><item><title>Complex Statements</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/strings-input/complex-statements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/strings-input/complex-statements/</guid><description>Resources Slides Finally, let’s look at how we can rewrite some of our previous Python programs by combining expressions into more complex statements. Python allows us to perform multiple actions on a single line of code, provided they can all be combined in some way to create a single statement.
Let’s consider the example on the previous page, shown here:
text_one = input("Enter the first number: ") one = int(text_one) text_two = input("Enter the second number: ") two = int(text_two) one = one * one two = two * two total = one + two print(f"The sum of squares of {one} and {two} is {total}") There are many ways we can write this program to perform the same work.</description></item><item><title>Input Practice</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/strings-input/input-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/strings-input/input-practice/</guid><description>Let’s try some simple practice problems. These problems are not graded - they are just for you to practice before doing the real exercises in the lab itself. You can find the answers below each question by clicking the button below each question.
3.1 Reading Code Write the output that is displayed to the user after running the following Python code:
x = input("Enter a number: ") y = x + "00" z = int(y) a = int(z + (z / 100)) print(f"The result is {a}")Assume the user inputs the string "4" when prompted.</description></item><item><title>Summary</title><link>https://textbooks.cs.ksu.edu/intro-python-v2/strings-input/summary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/intro-python-v2/strings-input/summary/</guid><description>Python input input(expression) will display the expression to the user as a prompt, then return what was typed by the user as a string value. input(expression) is terminated by the user pressing ENTER, so next output starts on a new line. Python String Operators + Concatenation (join strings together). May only be applied to two strings. * Repeat (duplicate strings) \ Escape Operator for special characters f-string are used to format output.</description></item></channel></rss>